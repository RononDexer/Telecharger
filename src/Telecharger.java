
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author vivien
 */
public class Telecharger extends JFrame implements ClipboardOwner {
    //n'autoriser qu'un seul téléchargement à la fois 
    //TODO : avant de commencer téléchargment vérif si fichier précédent complet --> le déplacer
    String directoryDest=null;
    private ArrayList<String> commandsMv = new ArrayList<>();
    private ArrayList<String> commandsDl = new ArrayList<>();
    private ArrayList <String> filesWaitingList = new ArrayList<>();
    boolean oneDownloadInProgress = false;
    /**
     * Creates new form Telecharger2
     */
    public Telecharger() {
        clean();
        initComponents();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Telecharger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Telecharger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Telecharger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Telecharger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Telecharger().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelName = new JLabel();
        jLabelMain = new JLabel();
        jTextFieldNameVid = new JTextField();
        jButtonValid = new JButton();
        jButtonCancel = new JButton();
        jButtonState = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jLabelName.setText("Nom");

        jLabelMain.setText("Télécharger des vidéos");

        jTextFieldNameVid.setText("Nom_de_la_video");

        jButtonValid.setText("Valider");
        jButtonValid.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonValidActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Annuler");
        jButtonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonState.setText("Etat");
        jButtonState.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonStateActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jLabelMain))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonState, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonValid, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonCancel, GroupLayout.PREFERRED_SIZE, 77, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelName, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNameVid, GroupLayout.PREFERRED_SIZE, 296, GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelMain, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelName, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNameVid, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonValid)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonState))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setBounds(0, 0, 394, 137);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        //nothing
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonValidActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonValidActionPerformed
        updateOneDownloadInProgress();
        String command = getClipboardContents();
        if (command.contains("php")){
            String name=jTextFieldNameVid.getText();
            if (!name.contains(".flv"))
                name+=".flv";
            if(directoryDest==null)
                directoryDest=selectDirectory();
            String nameDest=directoryDest+name;
            String directorySource=".france-tv";
            //TODO : cd, php, mv
            Runtime run = Runtime.getRuntime();
            String commandDlcd1 = "cd && mkdir "+directorySource+"; cd "+directorySource+" && ";
            String commandDl2 = command+" >./Telecharger/build/classes/output.txt";
            String commandDl=commandDlcd1+commandDl2;
            String commandMv = " && "+"mv *.flv "+nameDest+"; "+"rm -f ./Telecharger/build/classes/output.txt";
            if(!oneDownloadInProgress){
                try{
                    Process procDl = run.exec(new String[]{"/bin/bash", "-c", commandDl+commandMv});
                }
                catch(IOException e){return;}
            //TODO sortir les lignes en dessous et gérer plusieurs téléchargenents
            saveScriptDl(commandMv);
            filesWaitingList.add(name);
            oneDownloadInProgress=true;
            }
            else{
                JOptionPane.showMessageDialog(null,"Un téléchargement est déjà en cours.\n Veuillez recommencer plus tard.", "Echec",JOptionPane.ERROR_MESSAGE);
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"Le contenu du presse papier n'est pas correct.\n Veuillez recommencer.", "Echec",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonValidActionPerformed

    private void jButtonStateActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonStateActionPerformed
        showProgress();
    }//GEN-LAST:event_jButtonStateActionPerformed

    private void clean(){
        String commandCd = "cd && cd .france-tv/ && ";
        String commandClean1 = "rm -f *Frag;";//flv compris
        //sans le flv : "rm -f *Frag[0-9] *Frag[0-9][0-9][0-9] *Frag[0-9][0-9][0-9][0-9] *Frag[0-9][0-9][0-9][0-9][0-9];"
        String commandClean2 = "rm -f ./Telecharger/build/classes/output.txt";
        Runtime run = Runtime.getRuntime();
        try{
            Process procDl = run.exec(new String[]{"/bin/bash", "-c", commandCd+commandClean1+commandClean2});
        }
        catch(IOException e){return;}
    }
    
    private boolean saveScriptDl(String command){
        boolean saved=false;
        try{
            String path="command.sh";
            BufferedWriter buff = new BufferedWriter(new FileWriter(path,false));
            buff.write(command);
            buff.flush();
            buff.close();
        }
        catch(IOException e){ 
            JOptionPane.showMessageDialog(null,"Echec de la création du script de téléchargement", "Echec",JOptionPane.ERROR_MESSAGE);
        }
        return saved;
    }
    
    private String selectDirectory(){
        File selectedFile = null;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int option = fileChooser.showDialog(null,"Choisir répertoire");
        if (option == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
             // if the user accidently click a file, then select the parent directory.
            if (!selectedFile.isDirectory()) {
                selectedFile = selectedFile.getParentFile();
            }
        }
        if (selectedFile!=null)
            return selectedFile.getAbsolutePath()+"/";
        return null;
    }
    
    public void updateOneDownloadInProgress(){
        String path="output.txt";
        File file = new File(path);
        if (!file.exists()){
            oneDownloadInProgress=false;
        }
    }

    public void showProgress(){
        if(!oneDownloadInProgress){
            JOptionPane.showMessageDialog(null,"Pas de téléchargement en cours", "Pas de téléchargement en cours",JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            String path="output.txt";
            File file = new File(path);
            if (file.exists()){
                try{
                    String[] lines = readLinesFile(path);
                    JOptionPane.showMessageDialog(null,lines[lines.length-1], "Téléchargement en cours",JOptionPane.INFORMATION_MESSAGE);
                }
                catch(IOException e){}
            }
        }
    }
    
    public String[] readLinesFile(String path)throws IOException{
        BufferedReader buff=null;
        ArrayList<String> arrayLines=new ArrayList<String>();
        try {
          buff=buff = new BufferedReader(new FileReader(path));//file opening
          for (int i=0;;i++) {
            String line = buff.readLine();
            arrayLines.add(line);
            if (line.equals(null) | line.equals("\n")){//end of the file can produced a NullPointerException
              arrayLines.remove(arrayLines.size()-1);
              buff.close();
              break;
            }
          }
        }	
        catch(FileNotFoundException e){}
        catch (NullPointerException e){//end of the file
          arrayLines.remove(arrayLines.size()-1);
          buff.close();
        }
        String[] tabLines =  new String[arrayLines.size()];//convert arrayList to String[]
        for (int i=0;i<arrayLines.size();i++){
          tabLines[i]= ((String)arrayLines.get(i));
        }
        return tabLines;
    }
    
    public String getClipboardContents() {
        String result = "";
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        //odd: the Object param of getContents is not currently used
        Transferable contents = clipboard.getContents(null);
        boolean hasTransferableText = (contents != null) &&
          contents.isDataFlavorSupported(DataFlavor.stringFlavor);
        if (hasTransferableText) {
          try {
            result = (String) contents.getTransferData(DataFlavor.stringFlavor);
          }
          catch (UnsupportedFlavorException | IOException ex){
            JOptionPane.showMessageDialog(null,"Echec de la récupération du contenu du presse-papier", "Echec",JOptionPane.ERROR_MESSAGE);
          }
        }
        return result;
    }
    
    public void lostOwnership(Clipboard clipboard, Transferable contents) {}
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButtonCancel;
    private JButton jButtonState;
    private JButton jButtonValid;
    private JLabel jLabelMain;
    private JLabel jLabelName;
    private JTextField jTextFieldNameVid;
    // End of variables declaration//GEN-END:variables
}
